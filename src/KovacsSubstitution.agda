module KovacsSubstitution where

open import KovacsEmbedding public


-- Substitutions (Sub ; ∙ ; _,_)
data _⊢⋆_ : 𝒞 → 𝒞 → Set where
  []    : ∀ {Γ} → Γ ⊢⋆ []

  [_,_] : ∀ {Γ Ξ A} → (σ : Γ ⊢⋆ Ξ) (M : Γ ⊢ A)
                    → Γ ⊢⋆ [ Ξ , A ]


-- (_ₛ∘ₑ_)
_◐_ : ∀ {Γ Γ′ Ξ} → Γ ⊢⋆ Ξ → Γ′ ⊇ Γ → Γ′ ⊢⋆ Ξ
[]        ◐ η = []
[ σ , M ] ◐ η = [ σ ◐ η , ren η M ]

-- (_ₑ∘ₛ_)
_◑_ : ∀ {Γ Ξ Ξ′} → Ξ′ ⊇ Ξ → Γ ⊢⋆ Ξ′ → Γ ⊢⋆ Ξ
done    ◑ σ         = σ
wkₑ η   ◑ [ σ , M ] = η ◑ σ
liftₑ η ◑ [ σ , M ] = [ η ◑ σ , M ]


--------------------------------------------------------------------------------


-- (dropₛ)
wkₛ : ∀ {Γ Ξ A} → Γ ⊢⋆ Ξ → [ Γ , A ] ⊢⋆ Ξ
wkₛ σ = σ ◐ wkₑ idₑ

-- (keepₛ)
liftₛ : ∀ {Γ Ξ A} → Γ ⊢⋆ Ξ → [ Γ , A ] ⊢⋆ [ Ξ , A ]
liftₛ σ = [ wkₛ σ , ` zero ]

-- (⌜_⌝ᵒᵖᵉ)
⌊_⌋ : ∀ {Γ Γ′} → Γ′ ⊇ Γ → Γ′ ⊢⋆ Γ
⌊ done ⌋    = []
⌊ wkₑ η ⌋   = wkₛ ⌊ η ⌋
⌊ liftₑ η ⌋ = liftₛ ⌊ η ⌋

-- (∈ₛ)
getₛ : ∀ {Γ Ξ A} → Γ ⊢⋆ Ξ → Ξ ∋ A → Γ ⊢ A
getₛ [ σ , M ] zero    = M
getₛ [ σ , M ] (suc i) = getₛ σ i

-- (Tmₛ)
sub : ∀ {Γ Ξ A} → Γ ⊢⋆ Ξ → Ξ ⊢ A → Γ ⊢ A
sub σ (` i)   = getₛ σ i
sub σ (ƛ M)   = ƛ (sub (liftₛ σ) M)
sub σ (M ∙ N) = sub σ M ∙ sub σ N

-- (idₛ)
idₛ : ∀ {Γ} → Γ ⊢⋆ Γ
idₛ {[]}        = []
idₛ {[ Γ , A ]} = liftₛ idₛ

-- (_∘ₛ_)
_●_ : ∀ {Γ Ξ Φ} → Ξ ⊢⋆ Φ → Γ ⊢⋆ Ξ → Γ ⊢⋆ Φ
[]         ● σ₁ = []
[ σ₂ , M ] ● σ₁ = [ σ₂ ● σ₁ , sub σ₁ M ]


--------------------------------------------------------------------------------


-- (assₛₑₑ)
comp◐○ : ∀ {Γ Γ′ Γ″ Ξ} → (η₁ : Γ″ ⊇ Γ′) (η₂ : Γ′ ⊇ Γ) (σ : Γ ⊢⋆ Ξ)
                       → (σ ◐ η₂) ◐ η₁ ≡ σ ◐ (η₂ ○ η₁)
comp◐○ η₁ η₂ []        = refl
comp◐○ η₁ η₂ [ σ , M ] = [_,_] & comp◐○ η₁ η₂ σ ⊗ (ren○ η₁ η₂ M ⁻¹)

-- (assₑₛₑ)
comp◑◐ : ∀ {Γ Γ′ Ξ Ξ′} → (η₁ : Γ′ ⊇ Γ) (σ : Γ ⊢⋆ Ξ′) (η₂ : Ξ′ ⊇ Ξ)
                       → (η₂ ◑ σ) ◐ η₁ ≡ η₂ ◑ (σ ◐ η₁)
comp◑◐ η₁ []        done       = refl
comp◑◐ η₁ [ σ , M ] (wkₑ η₂)   = comp◑◐ η₁ σ η₂
comp◑◐ η₁ [ σ , M ] (liftₑ η₂) = [_, ren η₁ M ] & comp◑◐ η₁ σ η₂


--------------------------------------------------------------------------------


-- (idlₑₛ)
id₁◑ : ∀ {Γ Ξ} → (σ : Γ ⊢⋆ Ξ)
               → idₑ ◑ σ ≡ σ
id₁◑ []        = refl
id₁◑ [ σ , M ] = [_, M ] & id₁◑ σ

-- (idlₛₑ)
id₁◐ : ∀ {Γ Γ′} → (η : Γ′ ⊇ Γ)
                → idₛ ◐ η ≡ ⌊ η ⌋
id₁◐ done      = refl
id₁◐ (wkₑ η)   = ((idₛ ◐_) ∘ wkₑ) & id₂○ η ⁻¹
               ⦙ comp◐○ (wkₑ idₑ) η idₛ ⁻¹
               ⦙ wkₛ & id₁◐ η
id₁◐ (liftₑ η) = [_, ` zero ] & ( comp◐○ (liftₑ η) (wkₑ idₑ) idₛ
                                ⦙ ((idₛ ◐_) ∘ wkₑ) & (id₁○ η ⦙ id₂○ η ⁻¹)
                                ⦙ comp◐○ (wkₑ idₑ) η idₛ ⁻¹
                                ⦙ (_◐ wkₑ idₑ) & id₁◐ η
                                )

-- (idrₑₛ)
id₂◑ : ∀ {Γ Γ′} → (η : Γ′ ⊇ Γ)
                → η ◑ idₛ ≡ ⌊ η ⌋
id₂◑ done      = refl
id₂◑ (wkₑ η)   = comp◑◐ (wkₑ idₑ) idₛ η ⁻¹
               ⦙ wkₛ & id₂◑ η
id₂◑ (liftₑ η) = [_, ` zero ] & ( comp◑◐ (wkₑ idₑ) idₛ η ⁻¹
                                ⦙ (_◐ wkₑ idₑ) & id₂◑ η
                                )


--------------------------------------------------------------------------------


-- (∈-ₑ∘ₛ)
get◑ : ∀ {Γ Ξ Ξ′ A} → (σ : Γ ⊢⋆ Ξ′) (η : Ξ′ ⊇ Ξ) (i : Ξ ∋ A)
                    → getₛ (η ◑ σ) i ≡ (getₛ σ ∘ getₑ η) i
get◑ σ         done      i       = refl
get◑ [ σ , M ] (wkₑ η)   i       = get◑ σ η i
get◑ [ σ , M ] (liftₑ η) zero    = refl
get◑ [ σ , M ] (liftₑ η) (suc i) = get◑ σ η i

-- (Tm-ₑ∘ₛ)
sub◑ : ∀ {Γ Ξ Ξ′ A} → (σ : Γ ⊢⋆ Ξ′) (η : Ξ′ ⊇ Ξ) (M : Ξ ⊢ A)
                    → sub (η ◑ σ) M ≡ (sub σ ∘ ren η) M
sub◑ σ η (` i)   = get◑ σ η i
sub◑ σ η (ƛ M)   = ƛ & ((λ σ′ → sub [ σ′ , ` zero ] M)
                        & comp◑◐ (wkₑ idₑ) σ η
                        ⦙ sub◑ (liftₛ σ) (liftₑ η) M)
sub◑ σ η (M ∙ N) = _∙_ & sub◑ σ η M ⊗ sub◑ σ η N


--------------------------------------------------------------------------------


-- (∈-ₛ∘ₑ)
get◐ : ∀ {Γ Γ′ Ξ A} → (η : Γ′ ⊇ Γ) (σ : Γ ⊢⋆ Ξ) (i : Ξ ∋ A)
                    → getₛ (σ ◐ η) i ≡ (ren η ∘ getₛ σ) i
get◐ η [ σ , M ] zero    = refl
get◐ η [ σ , M ] (suc i) = get◐ η σ i

-- (Tm-ₛ∘ₑ)
sub◐ : ∀ {Γ Γ′ Ξ A} → (η : Γ′ ⊇ Γ) (σ : Γ ⊢⋆ Ξ) (M : Ξ ⊢ A)
                    → sub (σ ◐ η) M ≡ (ren η ∘ sub σ) M
sub◐ η σ (` i)   = get◐ η σ i
sub◐ η σ (ƛ M)   = ƛ & ( (λ σ′ → sub [ σ′ , ` zero ] M)
                         & ( comp◐○ (wkₑ idₑ) η σ
                           ⦙ (σ ◐_) & (wkₑ & (id₂○ η ⦙ id₁○ η ⁻¹))
                           ⦙ comp◐○ (liftₑ η) (wkₑ idₑ) σ ⁻¹
                           )
                       ⦙ sub◐ (liftₑ η) (liftₛ σ) M
                       )
sub◐ η σ (M ∙ N) = _∙_ & sub◐ η σ M ⊗ sub◐ η σ N


--------------------------------------------------------------------------------


-- (assₛₑₛ)
comp●◑ : ∀ {Γ Ξ Ξ′ Φ} → (σ₁ : Γ ⊢⋆ Ξ′) (η : Ξ′ ⊇ Ξ) (σ₂ : Ξ ⊢⋆ Φ)
                      → (σ₂ ◐ η) ● σ₁ ≡ σ₂ ● (η ◑ σ₁)
comp●◑ σ₁ η []         = refl
comp●◑ σ₁ η [ σ₂ , M ] = [_,_] & comp●◑ σ₁ η σ₂ ⊗ (sub◑ σ₁ η M ⁻¹)

-- (assₛₛₑ)
comp●◐ : ∀ {Γ Γ′ Ξ Φ} → (η : Γ′ ⊇ Γ) (σ₁ : Γ ⊢⋆ Ξ) (σ₂ : Ξ ⊢⋆ Φ)
                      → (σ₂ ● σ₁) ◐ η ≡ σ₂ ● (σ₁ ◐ η)
comp●◐ η σ₁ []         = refl
comp●◐ η σ₁ [ σ₂ , M ] = [_,_] & comp●◐ η σ₁ σ₂ ⊗ (sub◐ η σ₁ M ⁻¹)


--------------------------------------------------------------------------------


-- (∈-∘ₛ)
get● : ∀ {Γ Ξ Φ A} → (σ₁ : Γ ⊢⋆ Ξ) (σ₂ : Ξ ⊢⋆ Φ) (i : Φ ∋ A)
                   → getₛ (σ₂ ● σ₁) i ≡ (sub σ₁ ∘ getₛ σ₂) i
get● σ₁ [ σ₂ , M ] zero    = refl
get● σ₁ [ σ₂ , M ] (suc i) = get● σ₁ σ₂ i

-- (Tm-∘ₛ)
sub● : ∀ {Γ Ξ Φ A} → (σ₁ : Γ ⊢⋆ Ξ) (σ₂ : Ξ ⊢⋆ Φ) (M : Φ ⊢ A)
                   → sub (σ₂ ● σ₁) M ≡ (sub σ₁ ∘ sub σ₂) M
sub● σ₁ σ₂ (` i)   = get● σ₁ σ₂ i
sub● σ₁ σ₂ (ƛ M)   = ƛ & ( (λ σ′ → sub [ σ′ , ` zero ] M)
                           & ( comp●◐ (wkₑ idₑ) σ₁ σ₂
                             ⦙ (σ₂ ●_) & (id₁◑ (wkₛ σ₁) ⁻¹)
                                       ⦙ comp●◑ (liftₛ σ₁) (wkₑ idₑ) σ₂ ⁻¹
                             )
                         ⦙ sub● (liftₛ σ₁) (liftₛ σ₂) M
                         )
sub● σ₁ σ₂ (M ∙ N) = _∙_ & sub● σ₁ σ₂ M ⊗ sub● σ₁ σ₂ N


--------------------------------------------------------------------------------


-- (∈-idₛ)
idgetₛ : ∀ {Γ A} → (i : Γ ∋ A)
                 → getₛ idₛ i ≡ ` i
idgetₛ zero    = refl
idgetₛ (suc i) = get◐ (wkₑ idₑ) idₛ i
               ⦙ ren (wkₑ idₑ) & idgetₛ i
               ⦙ (_⊢_.` ∘ suc) & idgetₑ i

-- (Tm-idₛ)
idsub : ∀ {Γ A} → (M : Γ ⊢ A)
                → sub idₛ M ≡ M
idsub (` i)   = idgetₛ i
idsub (ƛ M)   = ƛ & idsub M
idsub (M ∙ N) = _∙_ & idsub M ⊗ idsub N


--------------------------------------------------------------------------------


-- (idrₛ)
id₂● : ∀ {Γ Ξ} → (σ : Γ ⊢⋆ Ξ)
               → σ ● idₛ ≡ σ
id₂● []        = refl
id₂● [ σ , M ] = [_,_] & id₂● σ ⊗ idsub M

-- (idlₛ)
id₁● : ∀ {Γ Ξ} → (σ : Γ ⊢⋆ Ξ)
               → idₛ ● σ ≡ σ
id₁● []        = refl
id₁● [ σ , M ] = [_, M ] & ( comp●◑ [ σ , M ] (wkₑ idₑ) idₛ
                           ⦙ id₁● (idₑ ◑ σ)
                           ⦙ id₁◑ σ
                           )

-- (assₛ)
assoc● : ∀ {Γ Ξ Φ Ψ} → (σ₁ : Γ ⊢⋆ Ξ) (σ₂ : Ξ ⊢⋆ Φ) (σ₃ : Φ ⊢⋆ Ψ)
                     → (σ₃ ● σ₂) ● σ₁ ≡ σ₃ ● (σ₂ ● σ₁)
assoc● σ₁ σ₂ []         = refl
assoc● σ₁ σ₂ [ σ₃ , M ] = [_,_] & assoc● σ₁ σ₂ σ₃ ⊗ (sub● σ₁ σ₂ M ⁻¹)


--------------------------------------------------------------------------------


𝗦𝗧𝗟𝗖 : Category 𝒞 _⊢⋆_
𝗦𝗧𝗟𝗖 =
  record
    { idₓ    = idₛ
    ; _⋄_    = _●_
    ; id₁⋄   = id₁●
    ; id₂⋄   = id₂●
    ; assoc⋄ = assoc●
    }


subPsh : 𝒯 → Presheaf₀ 𝗦𝗧𝗟𝗖
subPsh A =
  record
    { φₓ   = _⊢ A
    ; φₘ   = sub
    ; idφₘ = fext! idsub
    ; φₘ⋄  = λ σ₁ σ₂ → fext! (sub● σ₂ σ₁)
    }
